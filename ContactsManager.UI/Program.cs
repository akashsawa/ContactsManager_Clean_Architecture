using CrudExample.Controllers;
using ServiceContracts;
using Services;
using Microsoft.EntityFrameworkCore;
using Entities;
using Repositories;
using RepositoryContracts;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using CrudExample.Middleware;
using ContactsManager.Core.Domain.IdentityEntities;

var builder = WebApplication.CreateBuilder(args);
//add services into ioc container
//builder.Services.AddSingleton<ICountriesService, CountriesService>();
//builder.Services.AddSingleton<IPersonsService, PersonsService>();

//logging 
//builder.Host.ConfigureLogging(loggingProviders => { 
//    loggingProviders.ClearProviders();  // clearing all default logging providers like console, debug, eventlog

//    loggingProviders.AddConsole(); // means logs message will bedisplayed in console window only and not in debug window.

//    loggingProviders.AddEventLog();
//});
//logging

//replacing logging with serilog : serilog
builder.Host.UseSerilog((HostBuilderContext context, IServiceProvider services, LoggerConfiguration loggerConfiguration) =>
{
    loggerConfiguration.ReadFrom.Configuration(context.Configuration). // read configuration settings from built in iconfiguration 
    ReadFrom.Services(services); ////readout   current app's services and make them available to serilog. 
});
//replacing logging with serilog : serilog

builder.Services.AddControllersWithViews();

builder.Services.AddScoped<ICountriesRepository, CountriesRepository>();

builder.Services.AddScoped<IPersonsRepository, PersonsRepository>();

builder.Services.AddScoped<ICountriesService, CountriesService>();
//builder.Services.AddScoped<IPersonsService, PersonsService>();
builder.Services.AddScoped<IPersonsAdderService, PersonsAdderService>();
//builder.Services.AddScoped<IPersonsGetterService, PersonsGetterService>();

//fir OCP principle 
builder.Services.AddScoped<PersonsGetterService, PersonsGetterService>();
builder.Services.AddScoped<IPersonsGetterService, PersonsGetterServiceWithFewExcelFields>();
//for OCP principle

//for ocp inheritance
//builder.Services.AddScoped<PersonsGetterServiceChild, PersonsGetterServiceChild>();
//builder.Services.AddScoped<IPersonsGetterService, PersonsGetterServiceChild>();
//

builder.Services.AddScoped<IPersonsDeleterService, PersonsDeleterService>();
builder.Services.AddScoped<IPersonsUpdaterService, PersonsUpdaterService>();
builder.Services.AddScoped<IPersonsSorterService, PersonsSorterService>();




builder.Services.AddDbContext<ApplicationDBContext>(
    options =>
    {
        options.UseSqlServer(builder
            .Configuration.GetConnectionString("DefaultConnectionString")); // for using sql server or any other sql
    });

//Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=PersonsDatabase;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False

//addidentity
builder.Services.AddIdentity<ApplicationUser, ApplicationRole>().AddEntityFrameworkStores<ApplicationDBContext>().AddUserStore<ApplicationUser, ApplicationRole,ApplicationDBContext, Guid>(); // hey asp.net core i would like to add identity  services , and the model class for storing user details its applicationuser.
//addidenttiy


//http logging options
builder.Services.AddHttpLogging(options =>
{
    options.LoggingFields = Microsoft.AspNetCore.HttpLogging.HttpLoggingFields.RequestProperties | Microsoft.AspNetCore.HttpLogging.HttpLoggingFields.ResponsePropertiesAndHeaders; // means only showing particular properties.
});
//http logging options

var app = builder.Build();

//idiagnosticcontext
app.UseSerilogRequestLogging();
//idiagnosticcontext

//http logging
app.UseHttpLogging();

//http logging

//app.MapGet("/", () => "Hello World!");

if (builder.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Error"); // for showing error page useexceptionhandler()
    app.UseMiddleware();
}

//app.Logger.LogDebug("debug_message"); // this wont be present on console.
//app.Logger.LogInformation("information_message");
//app.Logger.LogWarning("warning_message");
//app.Logger.LogCritical("critical_message");
//app.Logger.LogError("error_message");


//for intergartion testing
if (builder.Environment.IsEnvironment("Test") == false)
{
    Rotativa.AspNetCore.RotativaConfiguration.Setup("wwwroot", wkhtmltopdfRelativePath: "Rotativa");  // for loading the exe file at run tiem and converting html content  to pdf.
}

app.UseStaticFiles();
app.UseRouting();
app.MapControllers();
app.Run();

// for integration testing
public partial class Program { }  // make the autogenerated program  accessible programmatically. the progream 

// for integration testing